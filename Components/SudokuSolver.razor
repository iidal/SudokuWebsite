@using SudokuWebsite.Models
@using SudokuWebsite.Services
@using Microsoft.AspNetCore.Components.Web

@inject BoardSolver BS;

<h3>SudokuSolver</h3>

<h5>@currentSlot.Slot[0].ToString() @currentSlot.Slot[1].ToString()</h5>

<div class="text-center">
    <table>
        <tr>
            <td class="board">
                @foreach (BoardSlot bs in boardSlots)
                {
                    <div class="game-cell-base" @onclick="(e=>SelectSlot(bs))">
                        @if (bs.Selected)
                        {
                            if (bs.Value != 0)
                            {
                                <p class="game-cell-selected">@bs.Value.ToString()</p>
                            }
                            else
                            {
                                <p class="game-cell-selected ">  </p>
                            }
                        }
                        else
                        {
                            if (bs.Value != 0)
                            {
                                <p class="game-cell">@bs.Value.ToString()</p>
                            }
                            else
                            {
                                <p class="game-cell">  </p>
                            }
                        }




                    </div>
                }
            </td>

            <td>
                @*actions*@
                <div>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(1))">1 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(2))">2 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(3))">3 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(4))">4 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(5))">5 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(6))">6 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(7))">7 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(8))">8 </button>
                    <button class="numpad-cell" @onclick="(e => ChangeSlotValue(9))">9 </button>


                </div>
            </td>
        </tr>


    </table>

</div>


@code {

    BoardSlot[,] boardSlots = new BoardSlot[9, 9];
    BoardSlot currentSlot = new BoardSlot(999, new int[] { 99, 99 }, 0, true); //can be null on page init
    BoardSlot previousSlot;



    protected override async Task OnInitializedAsync()
    {

        await InitializeBoard();
    }



    void SelectSlot(BoardSlot bs)
    {


        currentSlot.Selected = false;
        currentSlot = bs;
        currentSlot.Selected = true;

    }

    void ChangeSlotValue(int newVal)
    {
        board[currentSlot.Slot[0], currentSlot.Slot[1]] = newVal;
        currentSlot.Value = newVal;

        //boardSlots[currentSlot.Slot[0], currentSlot.Slot[1]] = currentSlot;
    }




    Task InitializeBoard()
    {

        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {

                boardSlots[i, j] = new BoardSlot(i + j, new int[] { j, i }, 0, false);

            }
        }
        return Task.CompletedTask;
    }



    public int[,] board = new int[9, 9] {
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },

            };



}

