@using SudokuWebsite.Models
@using SudokuWebsite.Services
@using Microsoft.AspNetCore.Components.Web

@inject BoardSolver BS;

<div class="text-center">
    <table>
        <tr>
            <td class="board">
                @foreach (BoardSlot bs in boardSlots)
                {

                    <div class="@GenerateClassString(bs)" @onclick="(e=>SelectSlot(bs))">


                        @*What's inside the slot*@

                        @if (bs.Selected)
                        {
                            if (bs.Value != 0)
                            {
                                <p class="game-cell-selected">@bs.Value.ToString()</p>
                            }
                            else
                            {
                                <p class="game-cell-selected ">  </p>
                            }
                        }
                        else
                        {
                            if (bs.Value != 0)
                            {
                                <p class="game-cell">@bs.Value.ToString()</p>
                            }
                            else
                            {
                                <p class="game-cell">  </p>
                            }
                        }




                    </div>
                }
            </td>

            <td class="buttons-area">
                @*actions*@
                <div>
                    <div class="btn-group">
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(1))">1</button>
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(2))">2</button>
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(3))">3</button>
                    </div>
                    <br />
                    <div class="btn-group">
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(4))">4</button>
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(5))">5</button>
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(6))">6</button>
                    </div>
                    <br />
                    <div class="btn-group">
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(7))">7</button>
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(8))">8</button>
                        <button class="numpad-cell" @onclick="(e => ChangeSlotValue(9))">9</button>

                    </div>
                </div>
                <br />
                <br />
                <br />


                <div>
                    <div class="btn-group">
                        <div>
                            <button class="btn-dark" @onclick="(e => ChangeSlotValue(0))">Clear Slot</button>
                        </div>
                        <div>
                            <button class="btn-dark" @onclick="(e => TryToSolve())">Check</button>
                            <div>
                                @if (boardInvalid == true)
                                {
                                    <p style="color:red"> invalid board input!</p>
                                }
                            </div>
                        </div>
                        <div>
                            <button class="btn-dark" @onclick="(e => ClearBoard())">Clear Board</button>
                        </div>
                    </div>
                </div>
            </td>
        </tr>


    </table>

</div>


@code {

    //board is used to send the board to the BoardSolver.cs
    //boardSlots store more info to be used here
    //values need to be changed to both

    BoardSlot[,] boardSlots = new BoardSlot[9, 9];
    BoardSlot currentSlot = new BoardSlot(999, new int[] { 99, 99 }, 0, false); //cant be null on page init


    public int[,] board = new int[9, 9] {
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0 },

            };


    bool boardInvalid = false;

    protected override async Task OnInitializedAsync()
    {

        await InitializeBoard();
    }



    void SelectSlot(BoardSlot bs)
    {


        currentSlot.Selected = false;
        currentSlot = bs;
        currentSlot.Selected = true;

    }

    void ChangeSlotValue(int newVal)
    {
        if (currentSlot.Selected)
        { // just to make sure things work
            board[currentSlot.Slot[1], currentSlot.Slot[0]] = newVal;
            currentSlot.Value = newVal;
        }
        //boardSlots[currentSlot.Slot[0], currentSlot.Slot[1]] = currentSlot;

        boardInvalid = false; //hiding the info about invalid board when player clicks on the board (trying to change it)
    }

    void TryToSolve()
    {

        //solve the board at BoardSolver.cs
        BS.board = (int[,])board.Clone();
        BS.PrintBoard();

        if (BS.StartSolving())
        {


            boardInvalid = false;

            //show the finished board
            for (int i = 0; i < boardSlots.GetLength(0); i++)
            {
                for (int j = 0; j < boardSlots.GetLength(1); j++)
                {
                    boardSlots[i, j].Value = BS.board[i, j];

                }
            }

        }
        else
        {
            //tell that the board can not be solved
            Console.WriteLine("u fucked up");
            BS.PrintBoard();
            boardInvalid = true;
        }






        // Console.WriteLine(BS.SolveBoard());

    }
    void ClearBoard()
    { // empty the whole board
        Console.WriteLine("cleared");
        for (int i = 0; i < boardSlots.GetLength(0); i++)
        {
            for (int j = 0; j < boardSlots.GetLength(1); j++)
            {
                boardSlots[i, j].Value = 0;

            }
        }
        for (int i = 0; i < board.GetLength(0); i++)
        {
            for (int j = 0; j < board.GetLength(1); j++)
            {
                board[i, j] = 0;

            }
        }

        BS.board = (int[,])board.Clone();
        BS.PrintBoard();

    }

    string GenerateClassString(BoardSlot bs)
    {

        //generate a suitable style class with the remainders of slots coordinate values
        string s = "game-cell-base";
        if (bs.Slot[0] % 3 == 0 && bs.Slot[0] != 0)
        {
            s = "game-cell-base-0";
        }
        if (bs.Slot[1] % 3 == 0 && bs.Slot[1] != 0)
        {
            s = "game-cell-base-1";
        }
        if (bs.Slot[0] % 3 == 0 && bs.Slot[0] != 0 && bs.Slot[1] % 3 == 0 && bs.Slot[1] != 0)
        {
            s = "game-cell-base-2";
        }

        return s;
    }


    Task InitializeBoard()
    {

        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {

                boardSlots[i, j] = new BoardSlot(i + j, new int[] { j, i }, 0, false);

            }
        }
        return Task.CompletedTask;
    }






}

